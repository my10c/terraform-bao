#!/usr/bin/env bash
#
# BSD 3-Clause License
#
# Copyright (c) 2003 - 2019 Luc Suryo
# Copyright (c) 2019, © Badassops LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#*
#* File			:	create_base64
#*
#* Description	:	create a base64 file
#*
#* Author	:	Luc Suryo <luc@badassops.com>
#*
#* Version	:	0.1
#*
#* Date		:	Jan 18, 2003
#*
#* History	:
#* 		Date:			Author:		Info:
#*		Jan 18, 2003	LIS			First Release to public
#*

_program="${0##*/}"
_author='Luc Suryo'
_copyright="Copyright 2019 - $(date "+%Y") © Badaddops LLC"
_license='License BSD, http://www.freebsd.org/copyright/freebsd-license.html'
_version='0.3'
_email='luc@badassops.com'
_summary='Script to create ssh keys'
_cancelled="OK : Process has been cancelled on your request."
_info="$_program $_version\n$_copyright\n$_license\n\nWritten by $_author <$_email>\n$_summary\n"

# Whatever script needs to be run as root and exclusive lock
_need_root=0
_need_lock=1

# color :)
# Reset
_color_off='\033[0m'		# Text Reset

# Bold
_color_black='\033[1;30m'	# Black
_color_red='\033[1;31m'		# Red
_color_green='\033[1;32m'	# Green
_color_yellow='\033[1;33m'	# Yellow
_color_blue='\033[1;34m'	# Blue
_color_purple='\033[1;35m'	# Purple
_color_cyan='\033[1;36m'	# Cyan
_color_white='\033[1;37m'	# White

# Set interrupt handler
trap inthandler 1 2 3 4 5 9 10 12 15 23 24 25

# working variables
_opid=$$
_work_dir=./"$_program".tmp
_lockfile="$_work_dir/$_program".LOCK
_echo_flag='-e'
_userdata_txt="userdata.txt"
_userdata_b64="userdata.b64"

function inthandler() {
	clean_up
	echo $_echo_flag "$_cancelled"
	exit $_state_ok
}

function clean_up() {
	rm -rf "$_work_dir" > /dev/null 2>&1
	return 0
}

function spinner() {
	local delay=0.75
	local spinstr='|/-\'
	while [ 1 ]; do
		#[[ ! "$(ps a | awk '{print $1}' | grep $_mypid)" ]] && return 0
		local temp=${spinstr#?}
		printf " [%c]" "$spinstr"
		local spinstr=$temp${spinstr%"$temp"}
		sleep $delay
		printf "\b\b\b\b\b\b"
	done
	printf "	\b\b\b\b"
}

function _print_it() {
	local _info_mode=$1
	shift
	case $_info_mode
	in
		main)		printf "${_color_purple}%s${_color_off}\n" "$*" 2>&1 ;;
		info)		printf "${_color_blue}%s${_color_off}\n" "$*" 2>&1 ;;
		ok)			printf "${_color_green}%s${_color_off}\n" "$*" 2>&1 ;;
		warning)	printf "${_color_yellow}%s${_color_off}\n" "$*" 2>&1 ;;
		error)		printf "${_color_red}%s${_color_off}\n" "$*" 2>&1 ;;
		help)		printf "${_color_cyan}" ; echo -e "$*" ; printf "${_color_off}" 2>&1 ;;
		ignore)		printf "${_color_purple}%s${_color_off}\n" "$*" 2>&1 ;;
		input)		printf "${_color_cyan}%s${_color_off}: " "$*" 2>&1 ;;
		*)			printf "${_color_cyan}%s${_color_off}\n" "$*" 2>&1 ;;
	esac
	return 0
}

function help() {
	trap 1 2 3 4 5 9 10 12 15 23 24 25
	_print_it help "$_info"
	_print_it help "Usage : $_program [-h|-v]"
	_print_it help " No option required."
	_print_it help " -h this help page."
	_print_it help " -v Show version."
	_print_it help "Notes:"
	clean_up
	exit $1
}

function get_given_options() {
	local _has_error=0
	while [[ -n "$1" ]]
	do
		case "$1" in
			'-v'|'--version')	_print_it version "$_version" ; exit $_state_ok ; ;;
			'-h'|'--help')		help 0 ;;   # Which includes -h and --help
		esac
		shift
	done
	return 0
}

function isRoot() {
	if (($(id -u) != 0)) ; then
		_print_it error "$_program: this script must be run as the user root"
		return 1
	fi
	return 0
}

function check_running() {
	if [[ -f "$_lockfile" ]]; then
		/bin/ps -p $(cat "$_lockfile") > /dev/null 2>&1
		if (( $? == 0 )) ; then
			_print_it warning "There is already a $_program running, execution has been terminated"
			_print_it warning "If this is an error please remove the lock file: $_lockfile"
			exit $_state_ok
		else
			_print_it warning "Lock file found and deleted since there is no process with that pid"
			rm -rf "$_lockfile" > /dev/null 2>&1
		fi
	fi
	if ! mkdir -p "$_work_dir" > /dev/null 2>&1;then
		_print_it error "Unable to create file working directory $_work_dir"
		exit $_state_unknown
	fi
	echo "$_opid" > "$_lockfile"
	return 0
}

function create_it() {
	local _result=0

	if [[ ! -f $_userdata_txt ]];
		return 1
	fi

	# hardcoded values
	spinner &
	_spid=$!

	# info : https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html
	# the first line must be: #cloud-config
	# to show original
	# base64  --decode $_userdata_b64
	base64 -w 0 $_userdata_txt > $_userdata_b64
	_result=$?
cat << _EOF_ > userdata.tvars
# user data variable
user_data = "$(cat $_userdata_b64)"
_EOF_
	sleep 5
	kill -TERM $_spid >/dev/null 2>&1
	return $_result
}

function main() {
	local _var_exit=$_state_ok

	get_given_options $@
	if (( $_need_root == 1 )) ; then
		 isRoot
		(( $? != 0 )) && _print_it info "$_info" && exit 255
	fi
	(( $_need_lock == 1 )) && check_running

	_print_it info "---" "$(date) Process starting"
	create_it
	_var_exit=$?

	clean_up
	trap 1 2 3 4 5 9 10 12 15 23 24 25
	case $_var_exit
	in
		0)	_print_it info "Process completed, result == $_var_exit"
			_print_it ok "---" "$(date) $_program $_state_ok_msg : succesful" ;;

		*)	_print_it info "Process completed, result == $_var_exit"
			_print_it error "---" "$(date) $_program $_state_critical_msg : has failed" ;;
	esac
	exit $_var_exit
}
main "$@"
